import 'dart:math' as math;
import 'package:flutter/material.dart';
import 'package:geoq/components/mainMenu.dart';
import 'package:geoq/components/toolInputContainer.dart';
import 'package:geoq/components/toolResultContainer.dart';

enum PoidsUnit { kg, lb }
enum TailleUnit { cm, po }
enum Sex { male, female }

class ToolPoidsIdealScreen extends StatefulWidget {
  @override
  _ToolPoidsIdealScreenState createState() => _ToolPoidsIdealScreenState();
}

class _ToolPoidsIdealScreenState extends State<ToolPoidsIdealScreen> {
  final _formKey = GlobalKey<FormState>();
  final TextEditingController _poids = TextEditingController();
  final TextEditingController _taille = TextEditingController();
  PoidsUnit _poidsUnit = PoidsUnit.kg;
  TailleUnit _tailleUnit = TailleUnit.cm;
  Sex _sex = Sex.male;
  String _resultSC = '';
  String _resultPoidsSecKg = '';
  String _resultPoidsSecLb = '';
  String _resultPoidsIdealKg = '';
  String _resultPoidsIdealLb = '';
  String _resultIMC = '';
  String _resultKgM2 = '';

  void _onPoidsUnitChange(value) {
    setState(() {
      _poidsUnit = value;
    });
  }

  void _onTailleUnitChange(value) {
    setState(() {
      _tailleUnit = value;
    });
  }

  void _onSexChange(value) {
    setState(() {
      _sex = value;
    });
  }

  String _poidsValidator(value) {
    if (value.isEmpty) {
      return 'SVP inscrire une valeur de poids.';
    }
    double poids = double.tryParse(value) ?? 0;
    if (_poidsUnit == PoidsUnit.lb) {
      poids /= 2.2;
    }
    if (poids <= 0 || poids > 450) {
      return 'Le poids doit être entre 0 et 450 Kg';
    }
    return null;
  }

  String _tailleValidator(value) {
    if (value.isEmpty) {
      return 'SVP inscrire une valeur de taille.';
    }
    double taille = double.tryParse(value) ?? 0;
    if (_tailleUnit == TailleUnit.po) {
      taille /= 2.54;
    }
    if (taille < 130 || taille > 250) {
      return 'La taille doit être comprise entre 130 et 250 cm';
    }
    return null;
  }

  void _calcResults() async {
    if (!_formKey.currentState.validate()) {
      return null;
    }

    double poids = double.tryParse(_poids.text) ?? 0;
    double taille = double.tryParse(_taille.text) ?? 0;

    if (poids == 0 || taille == 0) {
      setState(() {
        _resultSC = 'ERR';
      });
    } else {
      if (_poidsUnit == PoidsUnit.lb) {
        poids /= 2.2046226;
      }
      if (_tailleUnit == TailleUnit.po) {
        taille /= 2.54;
      }
      double resultSC = _calcSC(poids, taille);
      double resultIMC = _calcIMC(poids, taille);
      String resultKgM2 = _calcKgM2(resultIMC);

      double leanFactor = 1.07;
      double leanConvert = 148;
      double idealConvert = 45.5;
      if (_sex == Sex.male) {
        leanFactor = 1.1;
        leanConvert = 128;
        idealConvert = 50;
      }

      double resultPoidsSecKg =
          _calcPoidsSecKg(leanFactor, leanConvert, poids, taille);
      double resultPoidsSecLb = resultPoidsSecKg * 2.2046226;
      double resultIdealKg = idealConvert + 2.3 * (taille / 2.54 - 60);
      double resultIdealLg = resultIdealKg * 2.2046226;

      setState(() {
        _resultSC = resultSC.toStringAsFixed(2);
        _resultPoidsSecKg = resultPoidsSecKg.toStringAsFixed(0);
        _resultPoidsSecLb = resultPoidsSecLb.toStringAsFixed(0);
        _resultPoidsIdealKg = resultIdealKg.toStringAsFixed(0);
        _resultPoidsIdealLb = resultIdealLg.toStringAsFixed(0);
        _resultIMC = resultIMC.toStringAsFixed(1);
        _resultKgM2 = resultKgM2;
      });
      FocusScope.of(context).requestFocus(FocusNode());
    }
  }

  double _calcPoidsSecKg(leanFactor, leanConvert, weight, height) {
    return (leanFactor * weight) -
        (leanConvert * (math.pow(weight, 2) / math.pow(height, 2)));
  }

  String _calcKgM2(double imc) {
    String result = 'Maigre';
    if (imc >= 18.5) {
      if (imc < 25.0) {
        result = 'Normal';
      } else if (imc < 30) {
        result = 'Embonpoint';
      } else {
        result = 'Obésité';
      }
    }
    return result;
  }

  double _calcSC(poids, taille) {
    return math.pow(poids, 0.425) * math.pow(taille, 0.725) * 71.84 / 10000;
  }

  double _calcIMC(poids, taille) {
    return poids / math.pow(taille / 100, 2);
  }

  void _clearFormSC() async {
    setState(() {
      _formKey.currentState.reset();
      _poids.clear();
      _taille.clear();
      _resultSC = '';
      _resultKgM2 = '';
      _resultIMC = '';
      _resultPoidsIdealKg = '';
      _resultPoidsIdealLb = '';
      _resultPoidsSecKg = '';
      _resultPoidsSecLb = '';
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Calcul poids idéal'),
        centerTitle: true,
      ),
      body: SafeArea(
        child: Column(
          children: <Widget>[
            Expanded(
              child: Container(
                margin: EdgeInsets.all(5.0),
                decoration: BoxDecoration(
                  color: Color(0xFFF4F5F2),
                ),
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: <Widget>[
                    Expanded(
                      child: ListView(
                        children: <Widget>[
                          Container(
                            padding: EdgeInsets.symmetric(
                                vertical: 10.0, horizontal: 10.0),
                            width: double.infinity,
                            alignment: Alignment.center,
                            child: Text(
                              'Calcul de surface corporelle & Indice de masse corporelle',
                              style: TextStyle(
                                fontSize: 16.0,
                              ),
                            ),
                            color: Color(0xffDDDDDD),
                          ),
                          Form(
                            key: _formKey,
                            child: Container(
                              padding: EdgeInsets.symmetric(
                                  vertical: 20.0, horizontal: 10.0),
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: <Widget>[
                                  Row(
                                    children: <Widget>[
                                      Text(
                                        'Sexe',
                                        style: TextStyle(fontSize: 16.0),
                                      ),
                                      SizedBox(width: 15.0),
                                      Radio(
                                        value: Sex.male,
                                        groupValue: _sex,
                                        onChanged: _onSexChange,
                                      ),
                                      Text('homme',textScaleFactor: 1.0),
                                      SizedBox(width: 5.0),
                                      Radio(
                                        value: Sex.female,
                                        groupValue: _sex,
                                        onChanged: _onSexChange,
                                      ),
                                      Text('femme',textScaleFactor: 1.0),
                                    ],
                                  ),
                                  SizedBox(height: 15.0),
                                  Row(
                                    children: <Widget>[
                                      InputContainer(
                                        controller: _poids,
                                        label: 'Poids',
                                        validator: _poidsValidator,
                                      ),
                                      Radio(
                                        value: PoidsUnit.kg,
                                        groupValue: _poidsUnit,
                                        onChanged: _onPoidsUnitChange,
                                      ),
                                      Text('kg'),
                                      SizedBox(width: 5.0),
                                      Radio(
                                        value: PoidsUnit.lb,
                                        groupValue: _poidsUnit,
                                        onChanged: _onPoidsUnitChange,
                                      ),
                                      Text('lb'),
                                    ],
                                  ),
                                  SizedBox(height: 15.0),
                                  Row(
                                    children: <Widget>[
                                      InputContainer(
                                        controller: _taille,
                                        label: 'Taille',
                                        validator: _tailleValidator,
                                      ),
                                      Radio(
                                        value: TailleUnit.cm,
                                        groupValue: _tailleUnit,
                                        onChanged: _onTailleUnitChange,
                                      ),
                                      Text('cm'),
                                      SizedBox(width: 5.0),
                                      Radio(
                                        value: TailleUnit.po,
                                        groupValue: _tailleUnit,
                                        onChanged: _onTailleUnitChange,
                                      ),
                                      Text('po'),
                                    ],
                                  ),
                                ],
                              ),
                            ),
                          ),
                          ResultContainer(
                            result: _resultSC,
                            label: 'S.C. (m²)',
                          ),
                          ResultContainer(
                            result: _resultPoidsSecKg,
                            label: 'Poids sec (kg)',
                          ),
                          ResultContainer(
                            result: _resultPoidsSecLb,
                            label: 'Poids sec (lbs)',
                          ),
                          ResultContainer(
                            result: _resultPoidsIdealKg,
                            label: 'Poids idéal (kg)',
                          ),
                          ResultContainer(
                            result: _resultPoidsIdealLb,
                            label: 'Poids idéal (lbs)',
                          ),
                          ResultContainer(
                            result: _resultIMC,
                            label: 'I.M.C.',
                          ),
                          ResultContainer(
                            result: _resultKgM2,
                            label: 'kg/m2',
                          ),
                        ],
                      ),
                    ),
                    Container(
                      color: Color(0xffeeeeee),
                      padding: EdgeInsets.all(10.0),
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        crossAxisAlignment: CrossAxisAlignment.center,
                        children: <Widget>[
                          FlatButton(
                            onPressed: _calcResults,
                            child: Text(
                              'Calcul',
                              style: TextStyle(fontSize: 16.0),
                            ),
                            padding: EdgeInsets.all(12.0),
                            color: Color(0xffDDDDDD),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(5.0),
                            ),
                          ),
                          SizedBox(width: 8.0),
                          FlatButton(
                            onPressed: _clearFormSC,
                            child: Text(
                              'Recommencer',
                              style: TextStyle(fontSize: 16.0),
                            ),
                            padding: EdgeInsets.all(12.0),
                            color: Color(0xffDDDDDD),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(5.0),
                            ),
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
              ),
            ),
            MainMenu(
              screen: 'tool',
            ),
          ],
        ),
      ),
    );
  }
}


class InputContainer extends StatelessWidget {
  InputContainer({
    @required this.controller,
    @required this.label,
    @required this.validator,
  });

  final TextEditingController controller;
  final String label;
  final Function validator;

  @override
  Widget build(BuildContext context) {
    return Container(
      width: 130.0,
      child: TextFormField(
        controller: controller,
        validator: validator,
        keyboardType: TextInputType.number,
        decoration: InputDecoration(
          filled: true,
          labelText: label,
          errorMaxLines: 5,
          contentPadding: EdgeInsets.all(10),
          border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(5.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(5.0),
            borderSide: BorderSide(color: Color(0xffC3C3C3)),
          ),
          fillColor: Colors.white,
        ),
      ),
    );
  }
}


class InputNumberField extends StatelessWidget {
  InputNumberField({
    @required this.controller,
    @required this.validator,
    this.enabled: true,
  });

  final TextEditingController controller;
  final Function validator;
  final bool enabled;

  @override
  Widget build(BuildContext context) {
    return TextFormField(
      controller: controller,
      validator: validator,
      enabled: enabled,
      keyboardType: TextInputType.number,
      decoration: InputDecoration(
        filled: true,
        errorMaxLines: 2,
        contentPadding: EdgeInsets.all(8),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(5.0),
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(5.0),
          borderSide: BorderSide(color: Color(0xffC3C3C3)),
        ),
        fillColor: Colors.white,
      ),
    );
  }
}


class ResultContainer extends StatelessWidget {
  ResultContainer({
    @required this.result,
    @required this.label,
  });

  final String result;
  final String label;

  @override
  Widget build(BuildContext context) {
    return Container(
      padding: EdgeInsets.symmetric(horizontal: 10.0),
      margin: EdgeInsets.symmetric(vertical: 5.0),
      child: Row(
        children: <Widget>[
          label == ''
              ? Container()
              : Container(
                  width: 170.0,
                  padding:
                      EdgeInsets.symmetric(vertical: 15.0, horizontal: 20.0),
                  decoration: BoxDecoration(
                    borderRadius: BorderRadius.only(
                      bottomLeft: Radius.circular(5.0),
                      topLeft: Radius.circular(5.0),
                    ),
                    color: kAccentColor,
                  ),
                  child: Text(
                    '$label = ',
                    style: TextStyle(color: Colors.white, fontSize: 14.0),
                    textAlign: TextAlign.right,
                  ),
                ),
          Expanded(
            child: Container(
              padding: EdgeInsets.symmetric(vertical: 15.0, horizontal: 20.0),
              decoration: BoxDecoration(
                borderRadius: label == ''
                    ? BorderRadius.all(Radius.circular(5.0))
                    : BorderRadius.only(
                        bottomRight: Radius.circular(5.0),
                        topRight: Radius.circular(5.0),
                      ),
                color: Color(0XFFDDDDDD),
              ),
              child: Text(
                result,
                style: TextStyle(
                  fontSize: 15.0,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
}
